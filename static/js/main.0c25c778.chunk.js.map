{"version":3,"sources":["SpinningSquare.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","x","y","width","transformOrigin","concat","_useState","useState","_useState2","Object","slicedToArray","initialCoords","setInitialCoords","_useState3","_useState4","initialTime","setInitialTime","_useSpring","useSpring","transform","_useSpring2","setTransformSpring","react_default","a","createElement","web","rect","assign","onMouseOver","e","_e$target$getBounding","target","getBoundingClientRect","left","top","clientX","clientY","Date","now","onMouseOut","_e$target$getBounding2","finalCoords","timeElapsed","v","getAngle","Math","round","config","objectSpread","molasses","friction","style","colors","red","green","blue","App","N","z","getWidth","m","n","centerTransform","_this","u","p","max","abs","pow","renderSquare","_ref","center","s","color","SpinningSquare","key","fill","height","buildSquares","squares","push","className","viewBox","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c25c778.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useSpring, animated, config } from \"react-spring\";\n\nconst Square = props => {\n  const { x, y, width } = props;\n  const transformOrigin = `${x + width / 2}px ${y + width / 2}px`;\n\n  const [initialCoords, setInitialCoords] = useState(null);\n  const [initialTime, setInitialTime] = useState(null);\n\n  const [{ transform }, setTransformSpring] = useSpring(() => ({\n    transform: \"rotateX(0deg) rotateY(0deg)\"\n  }));\n\n  const handleMouseOver = e => {\n    const { left, top } = e.target.getBoundingClientRect();\n\n    setInitialCoords({\n      x: e.clientX - left,\n      y: e.clientY - top\n    });\n\n    setInitialTime(Date.now());\n  };\n\n  const handleMouseOut = e => {\n    if (!initialCoords) return null;\n\n    const { left, top } = e.target.getBoundingClientRect();\n\n    const finalCoords = {\n      x: e.clientX - left,\n      y: e.clientY - top\n    };\n\n    const timeElapsed = Date.now() - initialTime;\n\n    const v = {\n      x: (finalCoords.x - initialCoords.x) / timeElapsed,\n      y: (finalCoords.y - initialCoords.y) / timeElapsed\n    };\n\n    const getAngle = a => Math.round(1000 * a);\n\n    setTransformSpring({\n      transform: `rotateX(${getAngle(v.y)}deg) rotateY(${-1 *\n        getAngle(v.x)}deg)`,\n      config: {\n        ...config.molasses,\n        friction: 1000\n      }\n    });\n\n    setInitialCoords(null);\n  };\n\n  return (\n    <animated.rect\n      {...props}\n      onMouseOver={handleMouseOver}\n      onMouseOut={handleMouseOut}\n      style={{\n        transformOrigin,\n        transform\n      }}\n    />\n  );\n};\n\nexport default Square;\n","import React, { Component } from \"react\";\nimport SpinningSquare from \"./SpinningSquare\";\nimport \"./App.css\";\n\nconst colors = {\n  red: \"#ff0000\",\n  green: \"#05bc8e\",\n  blue: \"#4b81bf\"\n};\n\nclass App extends Component {\n  N = 24;\n  z = 0.7;\n\n  getWidth = (m, n) => {\n    // get coords relative to center\n    const centerTransform = (this.N - 1) / 2;\n    const u = m - centerTransform;\n    const v = n - centerTransform;\n\n    // perp distance to center\n    const p = Math.max(Math.abs(u), Math.abs(v));\n\n    return (\n      this.z / this.N +\n      ((16 * (1 - this.z)) / this.N ** 3) * (p - this.N / 4) ** 2\n    );\n  };\n\n  renderSquare = ({ m, n }) => {\n    const center = {\n      x: (n + 0.5) / this.N,\n      y: (m + 0.5) / this.N\n    };\n\n    // const s = 0.9 / this.N;\n    const s = this.getWidth(m, n);\n\n    let color = colors.blue;\n\n    if (n >= this.N / 4 && n < (3 * this.N) / 4) {\n      if (m >= this.N / 4 && m < (3 * this.N) / 4) {\n        color = colors.green;\n      }\n    }\n\n    return (\n      <SpinningSquare\n        key={`${m},${n}`}\n        fill={color}\n        width={s}\n        height={s}\n        x={center.x - s / 2}\n        y={center.y - s / 2}\n      />\n    );\n  };\n\n  buildSquares = () => {\n    const squares = [];\n    for (let n = 1; n < this.N - 1; n++) {\n      for (let m = 1; m < this.N - 1; m++) {\n        squares.push({ m, n });\n      }\n    }\n\n    return squares;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <svg width={600} height={600} viewBox=\"0 0 1 1\">\n          <rect width=\"100%\" height=\"100%\" fill={colors.red} />\n          {this.buildSquares().map(this.renderSquare)}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}